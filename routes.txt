const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const { User } = require('../models/user');
const { SECRET_KEY } = require('../config');
const jwt = require('jsonwebtoken');

const base = process.env.PWD;

jwt.sign(payload, SECRET_KEY, [options, callback])

router.get('/login', (req, res) => {
    res.sendFile(base + '/views/login.html');
});

router.post('/login',
  (req, res) => {
    console.log('rerouting to dashboard.');
    res.redirect('/');
});

router.get('/', (req, res) => {
    res.sendFile(base + '/views/index.html');
});
========================

const mockUsers = require('../MOCK_DATA.json');
const mockPosts = require('../MOCK_DATA_POSTS.json');

const { BasicStrategy } = require('passport-http');
const LocalStrategy = require('passport-local').Strategy;
const express = require('express');
const router = express.Router();
const jsonParser = require('body-parser').json;
const morgan = require('morgan');
const mongoose = require('mongoose');
const passport = require('passport');
const { User } = require('../models/user');
const session = require('express-session');
const bodyParser = require('body-parser');
router.use(bodyParser.urlencoded({extended:true}));
router.use(bodyParser.json());

router.use(jsonParser());

const base = process.env.PWD;

const localStrategy = new LocalStrategy(
  {
    usernameField: 'licenseNumber',
  },
  (licenseNumber, password, done) => {
    let user;
    console.log('Validating licenseNumber.');
    User
      .findOne({ licenseNumber: licenseNumber })
      .exec()
      .then(_user => {
        user = _user;
        if (!user) {
          return done(null, false, {message: 'Incorrect username'});
        }
        console.log('LicenseNumber Valid.')
        return user.validatePassword(password);
      })
      .then(isValid => {
        if (!isValid) {
          return done(null, false, {message: 'Incorrect password'});
        }
        console.log('Password Validated.')
        return done(null, user)
      });
  }
);

passport.use(localStrategy);
router.use(session({ secret: 'secret', resave: false, saveUninitialized: false }));
router.use(passport.initialize());
router.use(passport.session());

passport.serializeUser(function(user, done) {
  console.log('Serializing User');
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  console.log('De-Serializing User');
  User.findById(id, function(err, user) {
    done(err, user);
  });
});

function isAuthenticated (req,res,next) {
  console.log(req.user);
   if(req.user){
    return next();
   }
   else {
    return res.redirect('/login');
   }
}

router.get('/login', (req, res) => {
    res.sendFile(base + '/views/login.html');
});

router.post('/login', passport.authenticate('local', {
  session: true,
  failureRedirect: '/login'
  }),
  (req, res) => {
    console.log('rerouting to dashboard.');
    console.log(req.session);
    console.log(req.user);
    res.redirect('/');
});

router.get('/', isAuthenticated, (req, res) => {
    res.sendFile(base + '/views/index.html');
});

//Send all users
router.get('/users', function(req, res) {
  User
  .find()
  .exec()
  .then(users => {
    res.json({
      users: users.map(user => user.apiRepr())
    });
  })
  .catch(err => {
    console.log(err);
    res.status(500).json({message: 'Internal server error'});
  })
});

//Send specific user
router.get('/users/:id', function(req, res) {
  id = req.params.id;
  User
  .findById(id)
  .exec()
  .then(_user => {
    const user = _user.apiRepr()
    res.json({ user });
  })
  .catch(err => {
    console.log(err);
    res.status(500).json({message: 'Internal server error'});
  })
});

router.post('/newUser', (req, res) => {
  if (!req.body) {
    return res.status(400).json({message: 'No request body'});
  }

  if (!('licenseNumber' in req.body)) {
    return res.status(422).json({message: 'Missing field: licenseNumber'});
  }

  let {licenseNumber, password, firstName, lastName, profilePic, bio, phoneNumber, email, website, associations ,friends} = req.body;

  if (typeof licenseNumber !== 'number') {
    return res.status(422).json({message: 'Incorrect field type: licenseNumber'});
  }


  if (licenseNumber === '') {
    return res.status(422).json({message: 'Incorrect field length: licenseNumber'});
  }

  if (!(password)) {
    return res.status(422).json({message: 'Missing field: password'});
  }

  if (typeof password !== 'string') {
    return res.status(422).json({message: 'Incorrect field type: password'});
  }

  password = password.trim();

  if (password === '') {
    return res.status(422).json({message: 'Incorrect field length: password'});
  }

  // check for existing user
  return User
    .find({licenseNumber})
    .count()
    .exec()
    .then(count => {
      if (count > 0) {
        return res.status(422).json({message: 'licenseNumber already taken'});
      }
      // if no existing user, hash password
      return User.hashPassword(password)
    })
    .then(hash => {
      return User
        .create({
          licenseNumber: licenseNumber,
          password: hash,
          firstName: firstName,
          lastName: lastName,
          profilePic: profilePic,
          bio: bio,
          phoneNumber: phoneNumber,
          email: email,
          website: website,
          associations: associations,
          friends: friends
        })
    })
    .then(user => {
      return res.status(201).json(user.apiRepr());
    })
    .catch(err => {
      res.status(500).json({message: 'Internal server error'})
    });
});

//res.json({user: req.user.apiRepr()});

module.exports = { router };



//Send all posts
router.get('/posts', (req, res) => {
  res.json(mockPosts);
});

//Send a requested post
router.get('/posts/:id', (req, res) => {
  id = req.params.id;
  let posts = mockPosts.filter(function(post) {
    return post.id == id;
  });
  res.json(posts);
});

//Send posts specific to user
router.get('/posts/user/:id', (req, res) => {
  id = req.params.id;
  let posts = mockPosts.filter(function(post) {
    return post.user_id == id;
  });
  res.json(posts);
});

// app.put('/users/:id', (req, res) => {
//   // ensure that the id in the request path and the one in request body match
//   if (!(req.params.id && req.body.id && req.params.id === req.body.id)) {
//     const message = (
//       `Request path id (${req.params.id}) and request body id ` +
//       `(${req.body.id}) must match`);
//     console.error(message);
//     res.status(400).json({message: message});
//   }
// });
